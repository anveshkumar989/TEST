{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFblobtodls"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/empblobtosqldatabasetest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "blobtodatabase",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {
									"as": {
										"value": "'@{pipeline().parameters.DATABASENAME}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"parameters": {
					"DATABASENAME": {
						"type": "string",
						"defaultValue": "ENTER DATABASE"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empslinkedservice",
								"type": "DatasetReference"
							},
							"name": "empcsvdataflow"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTesttable",
								"type": "DatasetReference"
							},
							"name": "emptesttable"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tas as string\n}\nsource(output(\n\t\tempid as string,\n\t\tempname as string,\n\t\tsalary as string,\n\t\tdeptid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipLines: 1) ~> empcsvdataflow\nempcsvdataflow sink(input(\n\t\tEmpid as string,\n\t\tempname as string,\n\t\tsalary as string,\n\t\tdeptid as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tEmpid = empid,\n\t\tempname,\n\t\tsalary,\n\t\tdeptid\n\t)) ~> emptesttable"
				}
			},
			"dependsOn": []
		}
	]
}